// Code generated by go-bindata.
// sources:
// static/css/style.css
// static/index.html
// static/js/actions.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6e\xf2\x30\x10\x84\xcf\xd9\xa7\x58\x81\x7e\xe9\x2f\x22\x10\x94\x53\x9d\x5b\x2b\xd4\x4b\x4f\xb4\x2f\xb0\x64\x4d\xba\xad\xb1\x2d\xdb\x29\xa4\x88\x77\xaf\x42\x05\x22\xa5\xbe\xed\xe8\xdb\x99\xf1\xae\x1d\x77\x70\x80\x6c\x4b\xa1\x11\xab\xb0\xa8\x20\xf3\xc4\x2c\xb6\xf9\x19\x36\xce\xa6\x7c\x43\x5b\x31\x9d\xc2\xd1\x73\x5b\x0b\x13\x3e\x05\xb2\xac\x47\xd3\x8b\xf0\x42\x36\x8e\xa6\x18\xc9\xc6\x3c\xea\x20\x9b\xf3\x66\x94\x2f\xad\x70\x51\x14\xff\x2a\xc8\xd6\x54\x7f\x34\xc1\xb5\x96\x15\x8e\xcb\xb2\x1c\x48\xb9\x6c\xa9\xd1\xaa\x0d\xe6\xbf\xa7\x94\x74\xb0\xb3\x77\xdf\xdc\x55\x70\x04\xb1\xbe\x4d\x78\x00\x44\xc4\x9d\x70\x7a\x3b\x3b\x1e\x01\xe6\x13\x5c\xe9\xd8\x9a\x84\xaf\xb4\x36\x1a\x27\x73\x98\xb1\x7c\x9e\x86\x03\x64\x2c\xd1\x1b\xea\x14\xa6\x5e\xa8\x20\xfb\xb5\x7f\x61\x57\x6e\x87\x37\x7c\x1e\xdc\x6e\x40\x3d\x6a\x63\x7a\xec\xaa\x76\xed\x8c\x0b\x0a\xc7\xcb\xe5\xb2\xff\x8f\x0b\xac\x83\xc2\x85\xdf\x63\x74\x46\x18\xc7\xf7\xa7\x57\xdd\x78\xd7\xda\x98\xeb\x6b\x97\x7e\x8f\x8b\xc2\xef\x07\x81\x0f\x8e\xbb\xbf\x7b\xe5\x7d\xbe\xef\xe1\xef\x00\x00\x00\xff\xff\x04\x65\xab\x1c\xc4\x01\x00\x00")

func cssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_cssStyleCss,
		"css/style.css",
	)
}

func cssStyleCss() (*asset, error) {
	bytes, err := cssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/style.css", size: 452, mode: os.FileMode(436), modTime: time.Unix(1523215220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x70\x3c\xb5\x07\x9b\x2b\x7a\x19\x36\x3b\x87\x3a\x05\x56\xa0\xdb\x8a\xd5\xc3\xb6\xa3\x22\xb1\xb5\x12\x47\xf2\x24\xc6\xa9\xff\xfd\x20\x39\x40\x8c\x01\xbb\xf1\x3d\xbd\x0f\x12\x50\xf5\x6e\xf3\xad\x69\x7f\x3f\xdd\x43\x27\x87\x1e\x9e\x7e\xdc\x3d\x3e\x34\x80\x05\xd1\xcf\xdb\x86\x68\xd3\x6e\xe0\xd7\xe7\xf6\xcb\x23\xdc\x94\xef\xe1\x59\x82\xd5\x42\x74\xff\x15\x57\xd8\x89\x0c\x1f\x89\x4e\xa7\x53\x79\xba\x2d\x7d\x78\xa5\xf6\x3b\xbd\xa5\x94\x9b\x64\x3b\x8f\x45\xcc\x9e\xd2\x88\xc1\xf5\xaa\x4a\xdc\x7a\x05\x00\x50\x75\xac\xcc\x3c\x66\x78\x60\x51\x90\x32\x0b\xfe\x73\xb4\x63\x8d\x8d\x77\xc2\x4e\x8a\x76\x1a\x18\x41\xcf\xa8\x46\xe1\x37\xa1\x14\xf3\x09\x74\xa7\x42\x64\xa9\x8f\xf2\x52\x7c\x40\xa0\x45\x5a\x6f\xdd\x1e\x02\xf7\x35\x46\x99\x7a\x8e\x1d\xb3\x20\xc8\x34\xf0\x39\x41\xc7\x88\xd0\x05\x7e\xa9\x51\xc7\x48\x59\x55\x66\x72\x19\x13\x75\xb0\x83\x2c\x7d\x3b\x35\xaa\x99\x45\x88\x41\xd7\xb8\x8b\xa4\xb4\x58\xef\x62\xb9\x8b\xb8\xae\x68\x7e\x3d\x1f\x49\x97\x2b\xab\xad\x37\xd3\x22\xdb\xba\xe1\x28\x60\x4d\xbd\xe7\xe9\x21\xcf\xb9\x26\xb5\x80\x53\x07\x4e\x3c\x78\x97\x65\x35\x7a\x97\x35\x4d\xa7\xdc\x2b\x5f\x49\x67\xe3\x35\x82\x77\x7b\x9e\x86\xc0\x31\xd6\x18\x8e\xee\x39\x37\x5f\xf1\xc8\x4e\xae\xd3\x2a\xd9\xbb\xa8\xdc\x86\x05\x30\x76\x04\xdd\xab\xe4\x35\x76\x6c\xd5\xb6\x67\xbc\x3c\xff\x4f\x72\xe7\xcd\x84\x69\x6b\x74\xde\x70\xfc\xd7\x41\xc6\x8e\x8b\x8e\x0b\xac\x68\x3e\xbf\xa2\xf9\x0b\xfc\x0d\x00\x00\xff\xff\xbf\x62\xda\xdc\x78\x02\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 632, mode: os.FileMode(436), modTime: time.Unix(1523219173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsActionsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x6b\xc3\x30\x10\x85\xe7\xe8\x57\x1c\x5e\x22\x2f\x82\xd2\x31\x78\x69\x28\x34\x90\x4e\x2d\xdd\x85\xf5\x92\x08\xbb\x77\x41\x3a\xc7\x35\x25\xff\xbd\xd8\xb1\x29\x04\xb2\x1d\xbc\x7b\xdf\xfb\xcc\xa1\xe3\x5a\xa3\x30\xa5\x8e\x3f\xea\x14\xcf\x6a\x51\xd2\xaf\x21\x22\x8a\x07\xb2\x70\x0d\x86\xad\x04\x50\x55\xd1\xd3\xf3\x12\x11\x79\xce\x3d\x92\xcb\xd0\x2f\xdf\x76\xb0\x41\xea\xee\x1b\xac\xee\x08\x7d\x6d\x31\x9e\x2f\xc3\x2e\xd8\xa2\xc1\xb0\xe3\x73\xa7\x45\xe9\x2e\xe3\x67\x69\x56\x2b\x22\xfc\x28\x12\xfb\xd6\x45\xbe\x48\x03\xbb\xae\x5b\xc9\x58\x97\x13\xfd\x6a\xae\xe6\xdf\x4c\x78\xea\x6f\x4f\x9e\x8f\xb0\x71\xbc\x17\x0d\x96\x80\xec\x32\x7c\xaa\x4f\xb7\x64\xde\xd8\x98\xd5\x43\xa1\xa9\x54\x94\x2e\x32\x23\xbd\x7d\xbe\xef\xa9\x9a\x41\xc1\xab\xbf\x01\x36\x77\x06\x7b\xf1\xc1\x2e\xab\x0f\xc9\x8a\xac\x77\xe0\x22\x72\xd4\x62\xc2\xf5\x91\x83\xf4\x4e\xb8\x15\x1f\xa8\x9a\xa9\xe6\x2f\x00\x00\xff\xff\xc9\xf2\xd5\x59\x83\x01\x00\x00")

func jsActionsJsBytes() ([]byte, error) {
	return bindataRead(
		_jsActionsJs,
		"js/actions.js",
	)
}

func jsActionsJs() (*asset, error) {
	bytes, err := jsActionsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/actions.js", size: 387, mode: os.FileMode(436), modTime: time.Unix(1523219225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/style.css": cssStyleCss,
	"index.html": indexHtml,
	"js/actions.js": jsActionsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{cssStyleCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"actions.js": &bintree{jsActionsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

